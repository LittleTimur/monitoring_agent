#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
"""

import requests
import json
import time
from typing import Dict, Any

BASE_URL = "http://localhost:8000"

def test_agent_registration_with_auto_detection():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º ID/–∏–º–µ–Ω–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ ID/–∏–º—è (–¥–æ–ª–∂–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    agent_data = {
        "machine_name": "",  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        "machine_type": "Windows",
        "ip_address": "127.0.0.1"
    }
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        temp_agent_id = "temp_agent_" + str(int(time.time()))
        response = requests.post(
            f"{BASE_URL}/api/agents/{temp_agent_id}/register",
            params=agent_data
        )
        print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_metrics_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫...")
    
    agent_id = "test_agent_001"
    
    # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ –º–µ—Ç—Ä–∏–∫
    new_config = {
        "enabled_metrics": {
            "cpu": True,
            "memory": True,
            "disk": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏—Å–∫
            "network": True,
            "gpu": False,
            "hdd": False,
            "inventory": True
        },
        "heartbeat_interval_seconds": 30
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/config",
            json=new_config
        )
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_metrics_request_with_flags():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ñ–ª–∞–≥–æ–≤"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —Å —Ñ–ª–∞–≥–∞–º–∏...")
    
    agent_id = "test_agent_001"
    
    # –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (–æ–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–∞–º–∏)
    metrics_request = {
        "metrics": {
            "cpu": True,
            "memory": True,
            "disk": False,  # –ù–µ —Å–æ–±–∏—Ä–∞–µ–º –¥–∏—Å–∫
            "network": True,
            "gpu": False,
            "hdd": False,
            "inventory": True
        },
        "immediate": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/request_metrics",
            json=metrics_request
        )
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def test_backward_compatibility():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    agent_id = "test_agent_001"
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
    old_format_request = {
        "metrics": ["cpu", "memory", "disk"],
        "immediate": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/request_metrics",
            json=old_format_request
        )
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): {e}")
        return False

def test_agent_commands():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–∞...")
    
    agent_id = "test_agent_001"
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    config_command = {
        "command": "update_config",
        "data": {
            "enabled_metrics": {
                "cpu": True,
                "memory": True,
                "disk": False,
                "network": True,
                "gpu": False,
                "hdd": False,
                "inventory": True
            },
            "heartbeat_interval_seconds": 45
        },
        "timestamp": "2024-01-01T00:00:00"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/command",
            json=config_command
        )
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_metrics_collection_with_filtering():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
    
    agent_id = "test_agent_001"
    
    # –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ CPU –∏ –ø–∞–º—è—Ç–∏
    filtered_request = {
        "metrics": {
            "cpu": True,
            "memory": True,
            "disk": False,
            "network": False,
            "gpu": False,
            "hdd": False,
            "inventory": False
        },
        "immediate": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/request_metrics",
            json=filtered_request
        )
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_agent_registration_with_auto_detection()
    test_metrics_configuration()
    test_metrics_request_with_flags()
    test_backward_compatibility()
    test_agent_commands()
    test_metrics_collection_with_filtering()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")

if __name__ == "__main__":
    main() 