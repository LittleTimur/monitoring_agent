from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from datetime import datetime
import json
from typing import Optional, Dict, Any
import os

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ë–î
from .database.connection import init_db, close_db
from .api.agents import router as agents_router

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Monitoring Server",
    description="–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class MetricsData(BaseModel):
    timestamp: float
    machine_type: str
    agent_id: Optional[str] = None
    machine_name: Optional[str] = None
    cpu: Optional[Dict[str, Any]] = None
    memory: Optional[Dict[str, Any]] = None
    disk: Optional[Dict[str, Any]] = None
    network: Optional[Dict[str, Any]] = None
    gpu: Optional[Dict[str, Any]] = None
    hdd: Optional[Dict[str, Any]] = None
    user: Optional[Dict[str, Any]] = None
    inventory: Optional[Dict[str, Any]] = None

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(agents_router)

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Monitoring Server...")
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Monitoring Server...")
    await close_db()
    print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Monitoring Server API",
        "version": "1.0.0",
        "database": "PostgreSQL",
        "endpoints": {
            "agents": "/api/v1/agents",
            "metrics": "/metrics",
            "health": "/health",
            "docs": "/docs"
        }
    }

@app.post("/metrics")
async def receive_metrics(metrics: MetricsData, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç –∞–≥–µ–Ω—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/v1/agents/{agent_id}/metrics)"""
    try:
        print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞")
        print(f"   Timestamp: {metrics.timestamp}")
        print(f"   Machine type: {metrics.machine_type}")
        print(f"   Agent ID: {metrics.agent_id}")
        print(f"   Machine name: {metrics.machine_name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        agent_id = metrics.agent_id or f"agent_{int(metrics.timestamp)}"
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Agent ID: {agent_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        client_ip = request.client.host if request.client else "127.0.0.1"
        print(f"   Client IP: {client_ip}")
        
        # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í –§–ê–ô–õ (–≤—Ä–µ–º–µ–Ω–Ω–æ) ---
        log_path = os.path.join(os.path.dirname(__file__), "metrics_log.jsonl")
        with open(log_path, "a", encoding="utf-8") as f:
            f.write(json.dumps(metrics.dict(), ensure_ascii=False) + "\n")
        
        print(f"üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
        return {
            "status": "success", 
            "message": "Metrics received (legacy endpoint)",
            "note": "Use /api/v1/agents/{agent_id}/metrics for new API"
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "database": "PostgreSQL",
        "version": "1.0.0"
    }

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print(f"‚ùå 404 –æ—à–∏–±–∫–∞ –¥–ª—è {request.method} {request.url}")
    return {"detail": "Not Found", "path": str(request.url.path)}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 