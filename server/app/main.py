from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from datetime import datetime
import json
from typing import Optional, Dict, Any
import os

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from .api.agents import router as agents_router
from .services.agent_service import agent_service
from .models.agent import AgentStatus, MetricType

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Monitoring Server",
    description="–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class MetricsData(BaseModel):
    timestamp: float
    machine_type: str
    agent_id: Optional[str] = None
    machine_name: Optional[str] = None
    cpu: Optional[Dict[str, Any]] = None
    memory: Optional[Dict[str, Any]] = None
    disk: Optional[Dict[str, Any]] = None
    network: Optional[Dict[str, Any]] = None
    gpu: Optional[Dict[str, Any]] = None
    hdd: Optional[Dict[str, Any]] = None
    inventory: Optional[Dict[str, Any]] = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞–º—è—Ç–∏, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
agents_data = {}

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(agents_router)

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Monitoring Server API",
        "version": "1.0.0",
        "endpoints": {
            "metrics": "/metrics",
            "agents": "/api/agents",
            "agent_statistics": "/api/agents/statistics",
            "send_command": "/api/agents/{agent_id}/command",
            "send_command_all": "/api/agents/command_all",
            "register_agent": "/api/agents/register",
            "register_agent_with_id": "/api/agents/{agent_id}/register",
            "docs": "/docs"
        }
    }

@app.post("/metrics")
async def receive_metrics(metrics: MetricsData, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç –∞–≥–µ–Ω—Ç–∞"""
    try:
        print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞")
        print(f"   Timestamp: {metrics.timestamp}")
        print(f"   Machine type: {metrics.machine_type}")
        print(f"   Agent ID: {metrics.agent_id}")
        print(f"   Machine name: {metrics.machine_name}")
        print(f"   Request URL: {request.url}")
        print(f"   Request method: {request.method}")
        print(f"   Request headers: {dict(request.headers)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        agent_id = metrics.agent_id or f"agent_{int(metrics.timestamp)}"
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Agent ID: {agent_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        client_ip = request.client.host if request.client else "127.0.0.1"
        print(f"   Client IP: {client_ip}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        agent_service.process_agent_metrics(agent_id, metrics.dict(), client_ip)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏)
        agents_data[agent_id] = {
            "last_update": datetime.now().isoformat(),
            "data": metrics.dict()
        }
        
        # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í –§–ê–ô–õ ---
        log_path = os.path.join(os.path.dirname(__file__), "metrics_log.jsonl")
        with open(log_path, "a", encoding="utf-8") as f:
            f.write(json.dumps(metrics.dict(), ensure_ascii=False) + "\n")
        # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
        
        print(f"üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
        return {"status": "success", "message": "Metrics received"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/agents")
async def get_agents():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint)"""
    return {
        "agents": [
            {
                "id": agent_id,
                "last_update": data["last_update"],
                "machine_type": data["data"].get("machine_type", "Unknown")
            }
            for agent_id, data in agents_data.items()
        ]
    }

@app.get("/api/agents/{agent_id}")
async def get_agent(agent_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint)"""
    if agent_id not in agents_data:
        raise HTTPException(status_code=404, detail="Agent not found")
    
    return agents_data[agent_id]

@app.get("/api/agents/{agent_id}/config")
async def get_agent_config(agent_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint)"""
    agent = agent_service.get_agent(agent_id)
    if not agent:
        raise HTTPException(status_code=404, detail="Agent not found")
    
    return agent.config



@app.post("/api/agents/{agent_id}/command")
async def send_command_to_agent(agent_id: str, command: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç—É"""
    try:
        from .models.agent import AgentCommand
        from .services.agent_service import agent_service
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
        agent_command = AgentCommand(
            command=command.get("command", ""),
            data=command.get("data", {}),
            timestamp=datetime.now()
        )
        
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{agent_command.command}' –∞–≥–µ–Ω—Ç—É {agent_id}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {agent_command.data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        response = await agent_service.send_command_to_agent(agent_id, agent_command)
        
        if response.success:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É {agent_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {response.message}")
        
        return response.dict()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    stats = agent_service.get_agent_statistics()
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "active_agents": stats["online_agents"],
        "total_agents": stats["total_agents"],
        "online_percentage": stats["online_percentage"]
    }

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print(f"‚ùå 404 –æ—à–∏–±–∫–∞ –¥–ª—è {request.method} {request.url}")
    return {"detail": "Not Found", "path": str(request.url.path)}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 