#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
"""

import requests
import json
import time
from typing import Dict, Any, Optional

class ScriptAPITester:
    def __init__(self, base_url: str = "http://localhost:8000", agent_id: str = None):
        self.base_url = base_url
        self.agent_id = agent_id or self._get_first_agent_id()
        self.session = requests.Session()
        
    def _get_first_agent_id(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        try:
            response = self.session.get(f"{self.base_url}/api/agents/")
            if response.status_code == 200:
                agents = response.json()
                if agents:
                    agent_id = agents[0]["agent_id"]
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞: {agent_id}")
                    return agent_id
                else:
                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∞–≥–µ–Ω—Ç–∞: {e}")
            return "test_agent"
    
    def test_basic_script(self) -> bool:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        print("\nüîß –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç echo")
        
        data = {
            "script": "echo –ü—Ä–∏–≤–µ—Ç!",
            "interpreter": "cmd"
        }
        
        return self._send_script_request(data, "–ë–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç")
    
    def test_powershell_script(self) -> bool:
        """–¢–µ—Å—Ç PowerShell —Å–∫—Ä–∏–ø—Ç–∞"""
        print("\nüîß –¢–µ—Å—Ç 2: PowerShell —Å–∫—Ä–∏–ø—Ç")
        
        data = {
            "script": "Write-Host \"–ü—Ä–∏–≤–µ—Ç –∏–∑ PowerShell!\"",
            "interpreter": "powershell"
        }
        
        return self._send_script_request(data, "PowerShell —Å–∫—Ä–∏–ø—Ç")
    
    def test_python_script(self) -> bool:
        """–¢–µ—Å—Ç Python —Å–∫—Ä–∏–ø—Ç–∞"""
        print("\nüîß –¢–µ—Å—Ç 3: Python —Å–∫—Ä–∏–ø—Ç")
        
        data = {
            "script": "print('–ü—Ä–∏–≤–µ—Ç –∏–∑ Python!')\nprint('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', __import__('datetime').datetime.now())",
            "interpreter": "python"
        }
        
        return self._send_script_request(data, "Python —Å–∫—Ä–∏–ø—Ç")
    
    def test_script_with_args(self) -> bool:
        """–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        print("\nüîß –¢–µ—Å—Ç 4: –°–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        
        data = {
            "script": "echo –ü–∞—Ä–∞–º–µ—Ç—Ä 1: %1 && echo –ü–∞—Ä–∞–º–µ—Ç—Ä 2: %2",
            "interpreter": "cmd",
            "args": ["Hello", "World"]
        }
        
        return self._send_script_request(data, "–°–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    def test_script_with_timeout(self) -> bool:
        """–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        print("\nüîß –¢–µ—Å—Ç 5: –°–∫—Ä–∏–ø—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º")
        
        data = {
            "script": "ping -n 3 google.com",
            "interpreter": "cmd",
            "timeout_sec": 10
        }
        
        return self._send_script_request(data, "–°–∫—Ä–∏–ø—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º")
    
    def test_system_info_script(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("\nüîß –¢–µ—Å—Ç 6: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        data = {
            "script": "systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"",
            "interpreter": "cmd",
            "capture_output": True
        }
        
        return self._send_script_request(data, "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    def test_disk_info_script(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö"""
        print("\nüîß –¢–µ—Å—Ç 7: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö")
        
        data = {
            "script": "wmic logicaldisk get size,freespace,caption",
            "interpreter": "cmd",
            "capture_output": True
        }
        
        return self._send_script_request(data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö")
    
    def test_network_script(self) -> bool:
        """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("\nüîß –¢–µ—Å—Ç 8: –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        data = {
            "script": "ipconfig | findstr IPv4",
            "interpreter": "cmd",
            "capture_output": True
        }
        
        return self._send_script_request(data, "–°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    def test_background_script(self) -> bool:
        """–¢–µ—Å—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        print("\nüîß –¢–µ—Å—Ç 9: –§–æ–Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç")
        
        data = {
            "script": "start /B notepad.exe",
            "interpreter": "cmd",
            "capture_output": False,
            "background": True
        }
        
        return self._send_script_request(data, "–§–æ–Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç")
    
    def test_error_script(self) -> bool:
        """–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        print("\nüîß –¢–µ—Å—Ç 10: –°–∫—Ä–∏–ø—Ç —Å –æ—à–∏–±–∫–æ–π")
        
        data = {
            "script": "nonexistent_command",
            "interpreter": "cmd"
        }
        
        return self._send_script_request(data, "–°–∫—Ä–∏–ø—Ç —Å –æ—à–∏–±–∫–æ–π", expect_error=True)
    
    def _send_script_request(self, data: Dict[str, Any], test_name: str, expect_error: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞"""
        try:
            url = f"{self.base_url}/api/agents/{self.agent_id}/run_script"
            
            print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {test_name}")
            print(f"   üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
            response = self.session.post(url, json=data, timeout=30)
            
            print(f"   üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                
                if expect_error:
                    print(f"   ‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—Ö")
                    return False
                
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"   üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                
                if not expect_error:
                    print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ HTTP")
                    return False
                
                return True
                
        except requests.exceptions.Timeout:
            print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return False
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_all(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–∫—Ä–∏–ø—Ç–æ–≤")
        print(f"üìç –°–µ—Ä–≤–µ—Ä: {self.base_url}")
        print(f"üÜî –ê–≥–µ–Ω—Ç: {self.agent_id}")
        
        tests = [
            self.test_basic_script,
            self.test_powershell_script,
            self.test_python_script,
            self.test_script_with_args,
            self.test_script_with_timeout,
            self.test_system_info_script,
            self.test_disk_info_script,
            self.test_network_script,
            self.test_background_script,
            self.test_error_script
        ]
        
        passed = 0
        total = len(tests)
        
        for test in tests:
            try:
                if test():
                    passed += 1
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏")
    parser.add_argument("--url", default="http://localhost:8000", help="URL —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--agent", help="ID –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    tester = ScriptAPITester(args.url, args.agent)
    tester.test_all()

if __name__ == "__main__":
    main()

