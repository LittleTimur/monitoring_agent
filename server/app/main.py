from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from datetime import datetime
import json
from typing import Optional, Dict, Any
import os

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ë–î
from .database.connection import init_db, close_db, get_db
from .database.api import create_agent, agent_exists, save_metric, get_agent
from .api.agents import router as agents_router

def clean_null_characters(data):
    """–û—á–∏—â–∞–µ—Ç null-—Å–∏–º–≤–æ–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    if isinstance(data, dict):
        return {k: clean_null_characters(v) for k, v in data.items()}
    elif isinstance(data, list):
        return [clean_null_characters(item) for item in data]
    elif isinstance(data, str):
        return data.replace('\u0000', '').replace('\x00', '')
    else:
        return data

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Monitoring Server",
    description="–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class MetricsData(BaseModel):
    timestamp: float
    machine_type: str
    agent_id: Optional[str] = None
    machine_name: Optional[str] = None
    config: Optional[Dict[str, Any]] = None  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    cpu: Optional[Dict[str, Any]] = None
    memory: Optional[Dict[str, Any]] = None
    disk: Optional[Dict[str, Any]] = None
    network: Optional[Dict[str, Any]] = None
    gpu: Optional[Dict[str, Any]] = None
    hdd: Optional[Dict[str, Any]] = None
    user: Optional[Dict[str, Any]] = None
    inventory: Optional[Dict[str, Any]] = None

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(agents_router)

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Monitoring Server...")
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Monitoring Server...")
    await close_db()
    print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Monitoring Server API",
        "version": "1.0.0",
        "database": "PostgreSQL",
        "endpoints": {
            "agents": "/api/v1/agents",
            "metrics": "/metrics",
            "health": "/health",
            "docs": "/docs"
        }
    }

@app.post("/metrics")
async def receive_metrics(metrics: MetricsData, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç –∞–≥–µ–Ω—Ç–∞"""
    from .database.connection import get_db
    from .database.api import create_agent, save_metric, agent_exists
    from sqlalchemy.ext.asyncio import AsyncSession
    
    try:
        print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞")
        print(f"   Timestamp: {metrics.timestamp}")
        print(f"   Machine type: {metrics.machine_type}")
        print(f"   Agent ID: {metrics.agent_id}")
        print(f"   Machine name: {metrics.machine_name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        agent_id = metrics.agent_id or f"agent_{int(metrics.timestamp)}"
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Agent ID: {agent_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        client_ip = request.client.host if request.client else "127.0.0.1"
        print(f"   Client IP: {client_ip}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async for db in get_db():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç
            if not await agent_exists(db, agent_id):
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                agent_data = {
                    "agent_id": agent_id,
                    "machine_name": metrics.machine_name or "Unknown Machine",
                    "agent_ip": client_ip,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –∞–≥–µ–Ω—Ç–∞ 
                    "server_url": metrics.config.get("server_url", f"http://{client_ip}:8000"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º server_url –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≥–µ–Ω—Ç–∞
                    "auto_detect_id": True,
                    "auto_detect_name": True
                }
                await create_agent(db, agent_data)
                print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º IP –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                from .database.api import update_agent_config
                current_agent = await get_agent(db, agent_id)
                if current_agent and current_agent.agent_ip != client_ip:
                    await update_agent_config(db, agent_id, {"agent_ip": client_ip})
                    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω IP –∞–≥–µ–Ω—Ç–∞ {agent_id}: {client_ip}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if metrics.config:
                from .database.api import (
                    update_agent_config, 
                    create_agent_enabled_metric, create_agent_allowed_interpreter, 
                    delete_agent_enabled_metrics, delete_agent_allowed_interpreters,
                    get_agent_enabled_metrics, get_agent_allowed_interpreters
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î
                current_agent = await get_agent(db, agent_id)
                if current_agent:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –ø–æ–ª—è
                    config_changes = {}
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if metrics.config.get("update_frequency") != current_agent.update_frequency:
                        config_changes["update_frequency"] = metrics.config.get("update_frequency")
                    
                    if metrics.config.get("max_script_timeout_sec") != current_agent.max_script_timeout_sec:
                        config_changes["max_script_timeout_sec"] = metrics.config.get("max_script_timeout_sec")
                    
                    if metrics.config.get("max_output_bytes") != current_agent.max_output_bytes:
                        config_changes["max_output_bytes"] = metrics.config.get("max_output_bytes")
                    
                    if metrics.config.get("audit_log_enabled") != current_agent.audit_log_enabled:
                        config_changes["audit_log_enabled"] = metrics.config.get("audit_log_enabled")
                    
                    if metrics.config.get("audit_log_path") != current_agent.audit_log_path:
                        config_changes["audit_log_path"] = metrics.config.get("audit_log_path")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º command_server_url –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
                    if metrics.config.get("command_server_url") != current_agent.command_server_url:
                        config_changes["command_server_url"] = metrics.config.get("command_server_url")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if config_changes:
                        await update_agent_config(db, agent_id, config_changes)
                        print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_id}: {list(config_changes.keys())}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    if "enabled_metrics" in metrics.config:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ë–î
                        current_metrics = await get_agent_enabled_metrics(db, agent_id)
                        current_metric_names = {m.metric_name for m in current_metrics}
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                        new_metrics = metrics.config["enabled_metrics"]
                        if isinstance(new_metrics, dict):
                            new_metric_names = {name for name, enabled in new_metrics.items() if enabled}
                        elif isinstance(new_metrics, list):
                            new_metric_names = set(new_metrics)
                        else:
                            new_metric_names = set()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
                        if current_metric_names != new_metric_names:
                            await delete_agent_enabled_metrics(db, agent_id)
                            for metric_name in new_metric_names:
                                await create_agent_enabled_metric(db, agent_id, metric_name)
                            print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent_id}: {sorted(new_metric_names)}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã
                    if "allowed_interpreters" in metrics.config:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã –∏–∑ –ë–î
                        current_interpreters = await get_agent_allowed_interpreters(db, agent_id)
                        current_interpreter_names = {i.interpreter_name for i in current_interpreters}
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã –æ—Ç –∞–≥–µ–Ω—Ç–∞
                        new_interpreters = metrics.config["allowed_interpreters"]
                        if isinstance(new_interpreters, list):
                            new_interpreter_names = set(new_interpreters)
                        else:
                            new_interpreter_names = set()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
                        if current_interpreter_names != new_interpreter_names:
                            await delete_agent_allowed_interpreters(db, agent_id)
                            for interpreter_name in new_interpreter_names:
                                await create_agent_allowed_interpreter(db, agent_id, interpreter_name)
                            print(f"üêç –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã –∞–≥–µ–Ω—Ç–∞ {agent_id}: {sorted(new_interpreter_names)}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if "user_parameters" in metrics.config:
                        from .database.api import get_user_parameters, delete_user_parameter, create_user_parameter
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ë–î
                        current_params = await get_user_parameters(db, agent_id)
                        current_param_keys = {p.parameter_key for p in current_params}
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –∞–≥–µ–Ω—Ç–∞
                        new_params = metrics.config["user_parameters"]
                        if isinstance(new_params, dict):
                            new_param_keys = set(new_params.keys())
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
                            if current_param_keys != new_param_keys:
                                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                for param in current_params:
                                    await delete_user_parameter(db, param.id)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                for param_key, command in new_params.items():
                                    await create_user_parameter(db, agent_id, {
                                        "parameter_key": param_key,
                                        "command": command
                                    })
                                
                                print(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞ {agent_id}: {sorted(new_param_keys)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            for metric_type, metric_data in metrics.dict().items():
                if metric_type in ['cpu', 'memory', 'disk', 'network', 'gpu', 'hdd', 'user', 'inventory'] and metric_data:
                    # –û—á–∏—â–∞–µ–º null-—Å–∏–º–≤–æ–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    cleaned_data = clean_null_characters(metric_data)
                    
                    metric_dict = {
                        "agent_id": agent_id,
                        "machine_type": metrics.machine_type,
                        "machine_name": metrics.machine_name or "Unknown Machine",
                        "metric_type": metric_type,
                        "timestamp": datetime.fromtimestamp(metrics.timestamp),
                        "details": cleaned_data
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                    if metric_type == 'cpu' and 'usage_percent' in metric_data:
                        metric_dict['usage_percent'] = metric_data['usage_percent']
                    elif metric_type == 'memory' and 'usage_percent' in metric_data:
                        metric_dict['usage_percent'] = metric_data['usage_percent']
                    elif metric_type == 'disk' and 'usage_percent' in metric_data:
                        metric_dict['usage_percent'] = metric_data['usage_percent']
                    
                    await save_metric(db, metric_dict)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ {metric_type} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ async for
        
        print(f"‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
        return {
            "status": "success", 
            "message": "Metrics received and saved",
            "agent_id": agent_id
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "database": "PostgreSQL",
        "version": "1.0.0"
    }

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print(f"‚ùå 404 –æ—à–∏–±–∫–∞ –¥–ª—è {request.method} {request.url}")
    return {"detail": "Not Found", "path": str(request.url.path)}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 