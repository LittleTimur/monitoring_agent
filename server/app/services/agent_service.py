import requests
import json
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import asyncio
import aiohttp
import logging
from ..models.agent import (
    AgentInfo, AgentConfig, AgentStatus, AgentCommand, 
    AgentResponse, MetricsRequest, MetricType, AgentRegistration
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CommandStatus:
    """–°—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    TIMEOUT = "timeout"

class CommandExecution:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    def __init__(self, command: AgentCommand, agent_id: str):
        self.command = command
        self.agent_id = agent_id
        self.status = CommandStatus.PENDING
        self.start_time = datetime.now()
        self.end_time: Optional[datetime] = None
        self.response: Optional[AgentResponse] = None
        self.error_message: Optional[str] = None
        self.retry_count = 0
        self.max_retries = 3

class AgentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.agents: Dict[str, AgentInfo] = {}
        self.command_queue: Dict[str, List[AgentCommand]] = {}
        self.command_executions: Dict[str, List[CommandExecution]] = {}
        self.agent_timeout = 300  # 5 –º–∏–Ω—É—Ç - –∞–≥–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ñ–ª–∞–π–Ω
        self.command_timeout = 120  # 120 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.max_concurrent_commands = 5  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ –∞–≥–µ–Ω—Ç–∞
    
    def register_agent(self, agent_id: str, registration_data: 'AgentRegistration') -> AgentInfo:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
        logger.info(f"   Machine name: {registration_data.machine_name}")
        logger.info(f"   Machine type: {registration_data.machine_type}")
        logger.info(f"   IP address: {registration_data.ip_address}")
        
        agent_info = AgentInfo(
            agent_id=agent_id,
            machine_name=registration_data.machine_name,
            machine_type=registration_data.machine_type,
            status=AgentStatus.ONLINE,
            last_seen=datetime.now(),
            config=AgentConfig(
                agent_id=agent_id,
                machine_name=registration_data.machine_name
            ),
            ip_address=registration_data.ip_address
        )
        
        self.agents[agent_id] = agent_info
        self.command_queue[agent_id] = []
        self.command_executions[agent_id] = []
        
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agents)}")
        
        return agent_info
    
    def get_agent(self, agent_id: str) -> Optional[AgentInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ"""
        return self.agents.get(agent_id)
    
    def get_all_agents(self) -> List[AgentInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
        self._check_agent_statuses()
        return list(self.agents.values())
    
    def _check_agent_statuses(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        now = datetime.now()
        for agent_id, agent in self.agents.items():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ (–ø–æ –∫–æ–Ω—Ñ–∏–≥—É –∞–≥–µ–Ω—Ç–∞, –ª–∏–±–æ –¥–µ—Ñ–æ–ª—Ç 60 —Å–µ–∫)
            interval = getattr(agent.config, 'update_frequency', 60)
            # –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –¥–æ–ª—å—à–µ, —á–µ–º (–∏–Ω—Ç–µ—Ä–≤–∞–ª + 5 –º–∏–Ω—É—Ç), –∞–≥–µ–Ω—Ç OFFLINE
            if (now - agent.last_seen).total_seconds() > (interval + 300):
                agent.status = AgentStatus.OFFLINE
            else:
                agent.status = AgentStatus.ONLINE
    
    def update_agent_config(self, agent_id: str, config: AgentConfig) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ —Å push –Ω–∞ –∞–≥–µ–Ω—Ç"""
        if agent_id in self.agents:
            self.agents[agent_id].config = config
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            config_data = config.dict()
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å datetime –∏–ª–∏ None
            if 'agent_id' in config_data:
                del config_data['agent_id']
            if 'machine_name' in config_data:
                del config_data['machine_name']
            
            command = AgentCommand(
                command="update_config",
                data=config_data
            )
            self.command_queue[agent_id].append(command)
            # PUSH: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç—É –ø–æ HTTP (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            asyncio.create_task(self.send_command_to_agent(agent_id, command))
            return True
        return False
    
    def request_metrics(self, agent_id: str, metrics: List[MetricType] = None, 
                       immediate: bool = True) -> bool:
        """–ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –æ—Ç –∞–≥–µ–Ω—Ç–∞"""
        if agent_id not in self.agents:
            return False
        
        command = AgentCommand(
            command="collect_metrics",
            data={
                "metrics": [m.value for m in (metrics or [])],
                "immediate": immediate
            }
        )
        self.command_queue[agent_id].append(command)
        return True
    
    def request_metrics_from_all(self, metrics: List[MetricType] = None, 
                                immediate: bool = True) -> Dict[str, bool]:
        """–ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –æ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        results = {}
        for agent_id in self.agents.keys():
            results[agent_id] = self.request_metrics(agent_id, metrics, immediate)
        return results
    
    def restart_agent(self, agent_id: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        if agent_id not in self.agents:
            return False
        
        command = AgentCommand(command="restart")
        self.command_queue[agent_id].append(command)
        return True
    
    def stop_agent(self, agent_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        if agent_id not in self.agents:
            return False
        
        command = AgentCommand(command="stop")
        self.command_queue[agent_id].append(command)
        return True
    
    def get_pending_commands(self, agent_id: str) -> List[AgentCommand]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        return self.command_queue.get(agent_id, [])
    
    def remove_command(self, agent_id: str, command_index: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        if agent_id in self.command_queue and command_index < len(self.command_queue[agent_id]):
            self.command_queue[agent_id].pop(command_index)
    
    def get_command_executions(self, agent_id: str) -> List[CommandExecution]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        return self.command_executions.get(agent_id, [])
    
    def get_command_status(self, agent_id: str, command_index: int) -> Optional[CommandExecution]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        executions = self.command_executions.get(agent_id, [])
        if 0 <= command_index < len(executions):
            return executions[command_index]
        return None
    
    async def send_command_to_agent(self, agent_id: str, command: AgentCommand) -> AgentResponse:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç—É –ø–æ HTTP —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        agent = self.get_agent(agent_id)
        if not agent or not agent.ip_address:
            error_msg = f"Agent {agent_id} not found or no IP address"
            logger.error(error_msg)
            return AgentResponse(success=False, message=error_msg)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        execution = CommandExecution(command, agent_id)
        self.command_executions[agent_id].append(execution)
        execution_index = len(self.command_executions[agent_id]) - 1
        
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{command.command}' –∞–≥–µ–Ω—Ç—É {agent_id}")
        logger.info(f"   –ö–æ–º–∞–Ω–¥–∞ #{execution_index}, –¥–∞–Ω–Ω—ã–µ: {command.data}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        now = datetime.now()
        self.command_executions[agent_id] = [
            ex for ex in self.command_executions[agent_id]
            if ex.status not in [CommandStatus.COMPLETED, CommandStatus.FAILED, CommandStatus.TIMEOUT] or
               (ex.end_time and (now - ex.end_time).total_seconds() < 3600)
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        active_commands = sum(1 for ex in self.command_executions[agent_id] 
                            if ex.status in [CommandStatus.PENDING, CommandStatus.IN_PROGRESS])
        
        if active_commands >= self.max_concurrent_commands:
            error_msg = f"Too many concurrent commands for agent {agent_id}"
            logger.warning(error_msg)
            execution.status = CommandStatus.FAILED
            execution.error_message = error_msg
            execution.end_time = datetime.now()
            return AgentResponse(success=False, message=error_msg)
        
        execution.status = CommandStatus.IN_PROGRESS
        
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8081
            agent_url = f"http://{agent.ip_address}:8081/command"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–∫–ª—é—á–∞—è datetime –ø–æ–ª—è
            command_data = command.dict()
            # –£–±–∏—Ä–∞–µ–º timestamp –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if 'timestamp' in command_data:
                del command_data['timestamp']
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    agent_url,
                    json=command_data,
                    headers={"Content-Type": "application/json"},
                    timeout=aiohttp.ClientTimeout(total=self.command_timeout)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –æ—Ç –∞–≥–µ–Ω—Ç–∞
                        if 'timestamp' in data and (not data['timestamp'] or data['timestamp'] == ''):
                            data['timestamp'] = datetime.now().isoformat()
                        
                        try:
                            agent_response = AgentResponse(**data)
                        except Exception as validation_error:
                            # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞: {validation_error}")
                            logger.warning(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                            agent_response = AgentResponse(
                                success=data.get('success', False),
                                message=data.get('message', 'Invalid response format'),
                                data=data.get('data'),
                                timestamp=datetime.now()
                            )
                        
                        if agent_response.success:
                            execution.status = CommandStatus.COMPLETED
                            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command.command}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º {agent_id}")
                        else:
                            execution.status = CommandStatus.FAILED
                            logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ '{command.command}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {agent_response.message}")
                        
                        execution.response = agent_response
                        execution.end_time = datetime.now()
                        return agent_response
                    else:
                        error_msg = f"HTTP {response.status}: {await response.text()}"
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error_msg}")
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        if execution.retry_count < execution.max_retries:
                            execution.retry_count += 1
                            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {execution.retry_count}/{execution.max_retries}")
                            await asyncio.sleep(2 ** execution.retry_count)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ
                            execution.status = CommandStatus.FAILED
                            execution.error_message = error_msg
                            execution.end_time = datetime.now()
                            return AgentResponse(success=False, message=error_msg)
                        else:
                            execution.status = CommandStatus.FAILED
                            execution.error_message = error_msg
                            execution.end_time = datetime.now()
                            return AgentResponse(success=False, message=error_msg)
                            
        except asyncio.TimeoutError:
            error_msg = f"Command timeout after {self.command_timeout} seconds"
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã '{command.command}' –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
            
            if execution.retry_count < execution.max_retries:
                execution.retry_count += 1
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {execution.retry_count}/{execution.max_retries} –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞")
                await asyncio.sleep(2 ** execution.retry_count)
                # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                execution.status = CommandStatus.TIMEOUT
                execution.error_message = error_msg
                execution.end_time = datetime.now()
                return AgentResponse(success=False, message=error_msg)
            else:
                execution.status = CommandStatus.TIMEOUT
                execution.error_message = error_msg
                execution.end_time = datetime.now()
                return AgentResponse(success=False, message=error_msg)
                
        except Exception as e:
            error_msg = f"Error sending command: {str(e)}"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã '{command.command}' –∞–≥–µ–Ω—Ç—É {agent_id}: {error_msg}")
            
            if execution.retry_count < execution.max_retries:
                execution.retry_count += 1
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {execution.retry_count}/{execution.max_retries} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                await asyncio.sleep(2 ** execution.retry_count)
                # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                execution.status = CommandStatus.FAILED
                execution.error_message = error_msg
                execution.end_time = datetime.now()
                return AgentResponse(success=False, message=error_msg)
            else:
                execution.status = CommandStatus.FAILED
                execution.error_message = error_msg
                execution.end_time = datetime.now()
                return AgentResponse(success=False, message=error_msg)
    
    def process_agent_metrics(self, agent_id: str, metrics_data: dict, client_ip: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ—Ç –∞–≥–µ–Ω—Ç–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        current_time = datetime.now()
        
        if agent_id not in self.agents:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            self.agents[agent_id] = AgentInfo(
                agent_id=agent_id,
                machine_name=metrics_data.get("machine_name", "unknown"),
                machine_type=metrics_data.get("machine_type", "unknown"),
                status=AgentStatus.ONLINE,
                last_seen=current_time,
                config=AgentConfig(
                    agent_id=agent_id,
                    machine_name=metrics_data.get("machine_name", "unknown")
                ),
                ip_address=client_ip
            )
            self.command_queue[agent_id] = []
            self.command_executions[agent_id] = []
            logger.info(f" –ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç {agent_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å IP {client_ip}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent = self.agents[agent_id]
            agent.status = AgentStatus.ONLINE
            agent.last_seen = current_time
            agent.ip_address = client_ip
            logger.info(f"üì° –ê–≥–µ–Ω—Ç {agent_id} –æ–±–Ω–æ–≤–ª–µ–Ω (IP: {client_ip})")
    
    def get_agent_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º"""
        self._check_agent_statuses()
        
        total = len(self.agents)
        online = sum(1 for agent in self.agents.values() if agent.status == AgentStatus.ONLINE)
        offline = sum(1 for agent in self.agents.values() if agent.status == AgentStatus.OFFLINE)
        error = sum(1 for agent in self.agents.values() if agent.status == AgentStatus.ERROR)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        total_commands = sum(len(executions) for executions in self.command_executions.values())
        completed_commands = sum(
            sum(1 for ex in executions if ex.status == CommandStatus.COMPLETED)
            for executions in self.command_executions.values()
        )
        failed_commands = sum(
            sum(1 for ex in executions if ex.status in [CommandStatus.FAILED, CommandStatus.TIMEOUT])
            for executions in self.command_executions.values()
        )
        
        return {
            "total_agents": total,
            "online_agents": online,
            "offline_agents": offline,
            "error_agents": error,
            "online_percentage": (online / total * 100) if total > 0 else 0,
            "commands": {
                "total": total_commands,
                "completed": completed_commands,
                "failed": failed_commands,
                "success_rate": (completed_commands / total_commands * 100) if total_commands > 0 else 0
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
agent_service = AgentService() 