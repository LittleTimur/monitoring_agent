#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∞–≥–µ–Ω—Ç, —Å–µ—Ä–≤–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫
"""

import requests
import json
import time
import subprocess
import sys
import os
from typing import Dict, Any

BASE_URL = "http://localhost:8000"

def check_server_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return False

def test_agent_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Ç—Ä–∏–∫ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    metrics_data = {
        "timestamp": time.time(),
        "machine_type": "Windows",
        "agent_id": "test_agent_auto_detect",
        "machine_name": "Test Machine",
        "cpu": {
            "usage_percent": 45.2,
            "temperature": 65.0
        },
        "memory": {
            "usage_percent": 60.1,
            "total_bytes": 8589934592
        }
    }
    
    try:
        response = requests.post(f"{BASE_URL}/metrics", json=metrics_data)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def test_agent_listing():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/agents")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        agents = response.json()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
        for agent in agents:
            print(f"   - {agent['agent_id']} ({agent['machine_name']}) - {agent['status']}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_metrics_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫...")
    
    agent_id = "test_agent_auto_detect"
    
    # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ –º–µ—Ç—Ä–∏–∫
    new_config = {
        "enabled_metrics": {
            "cpu": True,
            "memory": True,
            "disk": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏—Å–∫
            "network": True,
            "gpu": False,
            "hdd": False,
            "inventory": True
        },
        "heartbeat_interval_seconds": 30
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/config",
            json=new_config
        )
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_metrics_request_with_flags():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ñ–ª–∞–≥–æ–≤"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —Å —Ñ–ª–∞–≥–∞–º–∏...")
    
    agent_id = "test_agent_auto_detect"
    
    # –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (–æ–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–∞–º–∏)
    metrics_request = {
        "metrics": {
            "cpu": True,
            "memory": True,
            "disk": False,  # –ù–µ —Å–æ–±–∏—Ä–∞–µ–º –¥–∏—Å–∫
            "network": True,
            "gpu": False,
            "hdd": False,
            "inventory": True
        },
        "immediate": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/request_metrics",
            json=metrics_request
        )
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def test_backward_compatibility():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    agent_id = "test_agent_auto_detect"
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
    old_format_request = {
        "metrics": ["cpu", "memory", "disk"],
        "immediate": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/request_metrics",
            json=old_format_request
        )
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): {e}")
        return False

def test_agent_commands():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–∞...")
    
    agent_id = "test_agent_auto_detect"
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    config_command = {
        "command": "update_config",
        "data": {
            "enabled_metrics": {
                "cpu": True,
                "memory": True,
                "disk": False,
                "network": True,
                "gpu": False,
                "hdd": False,
                "inventory": True
            },
            "heartbeat_interval_seconds": 45
        },
        "timestamp": "2024-01-01T00:00:00"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/command",
            json=config_command
        )
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_metrics_filtering():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
    
    agent_id = "test_agent_auto_detect"
    
    # –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ CPU –∏ –ø–∞–º—è—Ç–∏
    filtered_request = {
        "metrics": {
            "cpu": True,
            "memory": True,
            "disk": False,
            "network": False,
            "gpu": False,
            "hdd": False,
            "inventory": False
        },
        "immediate": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/agents/{agent_id}/request_metrics",
            json=filtered_request
        )
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def test_agent_statistics():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/agents/statistics")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        stats = response.json()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if not check_server_running():
        print("\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:")
        print("cd server && python run.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    tests = [
        ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞", test_agent_registration),
        ("–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤", test_agent_listing),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫", test_metrics_configuration),
        ("–ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Å —Ñ–ª–∞–≥–∞–º–∏", test_metrics_request_with_flags),
        ("–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_backward_compatibility),
        ("–ö–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–∞", test_agent_commands),
        ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫", test_metrics_filtering),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤", test_agent_statistics),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
        if success:
            passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
    print("üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: ./monitoring_agent_new.exe")

if __name__ == "__main__":
    main() 